;	Author:	Daniele Giuliani
;	Program:	Interface to interact with the modified SPI protocol
;				used by the PSX to communicate with controller/memory cards

.program sel_monitor
; Input pins mapping:
;	0 - SEL
wait 1 pin 0	; wait for initial sync (SEL up)
.wrap_target
wait 0 pin 0	; wait for SEL low
irq clear 4		; signal other SMs SEL is low
wait 1 pin 0	; wait for SEL to go HIGH
irq set 0		; signal CPU to reset other SMs
.wrap

.program cmd_reader
; Input pins mapping:
;	0 - CMD
;	1 - SEL (not used)
;	2 - CLK
sel_high:
irq wait 4		; wait for SEL monitor to signal SM start
.wrap_target
wait 0 pin 2	; wait for clock to fall
wait 1 pin 2	; wait for rising clock edge
in pins 1		; sample 1 bit form CMD line
irq clear 1		; signal ACK timer to start TODO TEST
.wrap

.program dat_writer
; Set pins mapping:
;	0 - DAT
; Output pins mapping:
;	0 - DAT
; Input pins mapping:
;	0 - CLK
set pindirs, 0	; release DAT line (set pin as input = Hi-Z)
irq wait 4		; wait for SEL monitor to signal SM start
pull			; manual pull in order to stall SM if TX fifo is empty
.wrap_target
wait 1 pin 0	; check clock is high
wait 0 pin 0	; wait for falling clock edge
out pindirs 1	; output 1 bit (by changing pin direction)
.wrap

.program ack_sender
; Timing is based on first read bit of cmd_reader
; running with same clock as PSX protocol (242KHz circa)
.wrap_target
irq wait 1		[8]	; 8 clocks of delay (+ 1 if instruction itself)
set pindirs, 1		; keep ack low for more than half PSX clock
set pindirs, 0
.wrap


% c-sdk {
#define PSX_CLKDIV 515	// with pico default clock (125 Mhz) results in a frequency similar to PSX SPI frequency
#define ACK_IRQ 1

static inline void sel_monitor_program_init(PIO pio, uint sm, uint offset, uint pin_sel) {
	pio_sm_config c = sel_monitor_program_get_default_config(offset);
	/* Pin Configuration */
	sm_config_set_in_pins(&c, pin_sel);
	pio_sm_set_consecutive_pindirs(pio, sm, pin_sel, 1, false);
	pio_gpio_init(pio, pin_sel);		// SEL pin
	/* Interrupt Configuration */
	pio_set_irq0_source_enabled(pio, pis_interrupt0, true);
	/* Initialize and enable SM */
	pio_sm_init(pio, sm, offset, &c);
}

static inline void cmd_reader_program_init(PIO pio, uint sm, uint offset, uint pin_cmd) {
	pio_sm_config c = cmd_reader_program_get_default_config(offset);
	/* Pin Configuration */
	sm_config_set_in_pins(&c, pin_cmd);
	pio_sm_set_consecutive_pindirs(pio, sm, pin_cmd, 3, false);
	pio_gpio_init(pio, pin_cmd);			// CMD pin
	pio_gpio_init(pio, pin_cmd + 1);		// SEL pin
	pio_gpio_init(pio, pin_cmd + 2);		// CLK pin
	/* Fifo Configuration */
	sm_config_set_in_shift(&c, true, true, 8);		// shift ISR to right, autopush every 8 bits
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);	// join RX FIFO
	/* Initialize and enable SM */
	pio_sm_init(pio, sm, offset, &c);
}

static inline uint8_t read_cmd_byte_blocking(PIO pio, uint sm_cmd_reader) {
	return (uint8_t) (pio_sm_get_blocking(pio, sm_cmd_reader) >> 24);
}

static inline void dat_writer_program_init(PIO pio, uint sm, uint offset, uint pin_dat, uint pin_clk) {
	pio_sm_config c = dat_writer_program_get_default_config(offset);
	/* Pin Configuration */
	sm_config_set_in_pins(&c, pin_clk);		// set base IN pin (CLK)
	sm_config_set_out_pins(&c, pin_dat, 1);	// set base OUT pin (DAT)
	sm_config_set_set_pins(&c, pin_dat, 1);	// set base SET pin (DAT)
	pio_sm_set_pins_with_mask(pio, sm, 0x00000000, 1 << pin_dat);	// set DAT pin to low output
	pio_sm_set_consecutive_pindirs(pio, sm, pin_dat, 1, false);		// set DAT pin as input (initial configuration)
	pio_sm_set_consecutive_pindirs(pio, sm, pin_clk, 1, false);		// set CLK pin as input
	pio_gpio_init(pio, pin_dat);									// init DAT pin
	pio_gpio_init(pio, pin_clk);									// init CLK pin
	/* FIFO Configuration */
	sm_config_set_out_shift(&c, true, true, 8);		// shift OSR to right, autopull every 8 bits
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);	// join TX FIFO
	/* Initialize and enable SM */
	pio_sm_init(pio, sm, offset, &c);
}

static inline void write_dat_LSB_blocking(PIO pio, uint sm, uint32_t byte) {
	byte = ~byte & (0x000000ff);	// invert single bit values and mask off
									// 0s must become ones in order to set pins to output a low signal
									// 1s must be zeros to set pin to input creating a high-z state
	pio_sm_put_blocking(pio, sm, byte);	// place byte in tx fifo
}

static inline void ack_sender_program_init(PIO pio, uint sm, uint offset, uint pin_ack) {
	pio_sm_config c = ack_sender_program_get_default_config(offset);
	/* Pin Configuration */
	sm_config_set_set_pins(&c, pin_ack, 1);							// set base SET pin (ACK)
	pio_sm_set_pins_with_mask(pio, sm, 0x00000000, 1 << pin_ack);	// set ACK pin to low output
	pio_sm_set_consecutive_pindirs(pio, sm, pin_ack, 1, false);		// set ACK pin as input (initial configuration)
	pio_gpio_init(pio, pin_ack);									// init ACK pin
	/* Clock Configuration */
	sm_config_set_clkdiv_int_frac(&c, PSX_CLKDIV, 0x00);
	/* Initialize and enable SM */
	pio_sm_init(pio, sm, offset, &c);
}

static inline void send_ack(PIO pio) {
	pio_interrupt_clear(pio, ACK_IRQ);
}
%}